apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion androidVersion
    defaultConfig {
        applicationId "com.grappus.android.basemvvm"
        minSdkVersion 16
        targetSdkVersion androidVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled false

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    flavorDimensions "default"
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        development {
            getProps('./config/development.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        staging {
            getProps('./config/staging.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        production {
            getProps('./config/production.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
    }

    compileOptions {
        targetCompatibility javaCompatibilityVersion
        sourceCompatibility javaCompatibilityVersion
    }
}

def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

android.variantFilter { variant ->
    if ((variant.buildType.name == 'release' && (variant.getFlavors().get(0).name == 'development'
            || variant.getFlavors().get(0).name == 'staging')) || (variant.buildType.name == 'debug' &&
            variant.getFlavors().get(0).name == 'production')) {
        variant.setIgnore(true);
    }
}

dependencies {
    //External libraries
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    //Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //Native/Support Libraries
    implementation "com.android.support:support-v4:$supportLibVersion"
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"

    //MultiDex Support
    implementation "com.android.support:multidex:$multidexSupportVersion"

    //Gson
    implementation "com.google.code.gson:gson:$gsonLibVersion"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitLibVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitLibVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$loggingInterceptorLibVersion"

    //RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaLibVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxJavaAndroidLibVersion"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rxJavaAdapterLibVersion"

    //Architecture Components: ViewModel, Room
    implementation "android.arch.lifecycle:extensions:$lifecycleComponentVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$lifecycleComponentVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glideLibVersion"

    //File Picker
    implementation "com.kbeanie:multipicker:$multipickerLibVersion"

    //Loader
    implementation "com.wang.avi:library:$loaderVersion"
}